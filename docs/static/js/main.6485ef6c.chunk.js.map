{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","defaultCategories","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGVC,mBAAS,IAHC,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAuB9C,OACE,uBAAMC,SAba,SAACC,GACpBA,EAAEC,iBAIEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKhB,UACE,4BAAID,IACJ,uBACEQ,KAAK,OACLC,MAAOT,EACPU,SAvBoB,SAACP,GAEzBF,EAAcE,EAAEQ,OAAOF,c,+BCZdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAUH,GAF3C,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAItCa,QAAQC,IAAIR,GAhBS,kBAoBdA,GApBc,4CAAH,sDCGPS,EAAc,SAAC,GAAiB,IAAhBL,EAAe,EAAfA,MAAMV,EAAS,EAATA,IACjC,OACE,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,kCAAKA,EAAL,WCFOS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEdd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAXAC,qBAAU,WACR1B,EAAQC,GACL0B,MAAK,SAAAC,GACJH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGd,CAACtB,IAGGuB,EDf2BK,CAAa5B,GAAjCa,EAFuB,EAE7BN,KAAce,EAFe,EAEfA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAEjDsB,GAAW,mBAAGJ,UAAU,mCAAb,0BAEb,qBAAKA,UAAU,YAAf,SAEIL,EAAOJ,KAAI,SAAAC,GAAG,OAEZ,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEfVkB,EAAe,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,IAEtB5C,mBAAS4C,GAFa,mBAEnDC,EAFmD,KAEvC9C,EAFuC,KAI1D,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEI8C,EAAWtB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCXnBgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6485ef6c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n  // useState\r\n  const [inputValue, setinputValue] = useState('');\r\n\r\n  // Mostramos valores actualizados del input cuando la persona escribe algo\r\n  const handleInputChange = (e) => {\r\n    // console.log(e.target.value);\r\n    setinputValue(e.target.value);\r\n  }\r\n  // Manejo de enter\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // console.log('handleSubmit', inputValue);\r\n\r\n    // validación\r\n    if (inputValue.trim().length > 2) {\r\n      // obtenemos información de otro componente con \r\n      setCategories(cats => [inputValue, ...cats]);\r\n      setinputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} >\r\n      <p>{inputValue}</p>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n\r\n    </form>\r\n  )\r\n}\r\n// setCategories --> sera requerido usar esta función\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n  // traer images  con fecth\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=4spQrqJHxgysyLL39JnhDCahPWfqmr2C`;\r\n\r\n  const resp = await fetch(url);\r\n\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url // colocamos ? en caso de undefined\r\n    }\r\n  })\r\n\r\n  console.log(gifs);\r\n  // le asignamos al state de las imagenes\r\n  // setImages(gifs);\r\n\r\n  return gifs;\r\n\r\n}\r\n\r\n// regresa una promesa que resuelve la coleccion de mis imagenes","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p> {title} </p>\r\n    </div>\r\n  )\r\n}\r\nGifGridItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n  // Llamamaos el hook\r\n  const { data: images, loading } = useFetchGifs(category); // enviamos al hook nuestra category\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n       {loading && <p className=\"animate__animated animate__flash\">Loading.....</p>} \r\n\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map(img => (\r\n\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img } // envio propiedades independientes\r\n            />\r\n\r\n          ))\r\n        }\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n// utilización de helpers\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then(imgs => {\r\n        setstate({\r\n          data: imgs,\r\n          loading: false\r\n        })\r\n      })\r\n  }, [category])\r\n\r\n\r\n  return state;// {data:[], loading:true}\r\n}\r\n","\nimport React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = ({ defaultCategories = [] }) => {\n\n  const [categories, setCategories] = useState(defaultCategories);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid\n              key={category}\n              category={category}\n            />\n\n          ))\n        }\n      </ol>\n    </>\n  )\n}\n\n// Debemos mostrar siempre los elementos utilizando su key\n// no podemos mutar la información con push","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}